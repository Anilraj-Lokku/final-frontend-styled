// import { useState } from "react";
// import BookingService from "../../services/BookingService";
// import FacilityGrid from "../facility/FacilityGrid";

// // Function to format date for datetime-local input
// const formatDateForInput = (date) => {
//  if (!date) return ""; // Return empty string if date is not set

//  const localDate = new Date(date);
//  const year = localDate.getFullYear();
//  const month = String(localDate.getMonth() + 1).padStart(2, "0");
//  const day = String(localDate.getDate()).padStart(2, "0");
//  const hours = String(localDate.getHours()).padStart(2, "0");
//  const minutes = String(localDate.getMinutes()).padStart(2, "0");

//  return `${year}-${month}-${day}T${hours}:${minutes}`;
// };

// // Function to convert date to ISO string
// const convertToISO = (date) => {
//  if (!date) return ""; // Return empty string if date is not set

//  return new Date(date).toISOString(); // This includes milliseconds and 'Z'
// };

// const BookingForm = () => {
//  const [id, setId] = useState("");
//  const [bookingDate, setBookingDate] = useState("");
//  const [facilityId, setFacilityId] = useState("");
//  const [residentId, setResidentId] = useState("");
//  const [eventDate, setEventDate] = useState("");
//  const [status, setStatus] = useState("Available");

//  const [responseMessage, setResponseMessage] = useState("");
//  const [errorMessage, setErrorMessage] = useState("");

//  const handleBookingDate = (event) => {
//   setBookingDate(event.target.value);
//  };

//  const handleEventDate = (event) => {
//   setEventDate(event.target.value);
//  };

//  const fnCreate = () => {
//   const booking = {
//    id: id,
//    bookingDate: convertToISO(bookingDate),
//    facilityId: facilityId,
//    residentId: residentId,
//    eventDate: convertToISO(eventDate),
//    status: status,
//   };

//   BookingService.fnCreateBooking(booking)
//    .then((response) => {
//     console.log("Response Data:", response.data); // Log the response to check its structure

//     // Access the id from bookingDto in the response data
//     const bookingDto = response.data.bookingDto;
//     if (bookingDto && bookingDto.id) {
//      setId(bookingDto.id); // Set autogenerated ID from response
//      setResponseMessage(
//       `Booking created successfully: ${JSON.stringify(response.data)}`
//      );
//     } else {
//      setErrorMessage("Error: Response does not contain booking ID.");
//     }
//     setErrorMessage(""); // Clear any previous error message
//    })
//    .catch((error) => {
//     // Handle and display error
//     if (error.response) {
//      setErrorMessage(`Error: ${error.response.data}`);
//     } else if (error.request) {
//      setErrorMessage("Request made but no response received.");
//     } else {
//      setErrorMessage(`Error: ${error.message}`);
//     }
//     setResponseMessage(""); // Clear any previous response message
//    });
//  };

//  return (
//   <div>
//    <nav className="navbar navbar-expand-lg fixed-top">
//     <div className="container">
//      <a className="navbar-brand" href="/">
//       Apartment Facility
//      </a>
//      <button
//       className="navbar-toggler"
//       type="button"
//       data-bs-toggle="offcanvas"
//       data-bs-target="#offcanvasNavbar"
//       aria-controls="offcanvasNavbar"
//       aria-label="Toggle navigation"
//      >
//       <span className="navbar-toggler-icon"></span>
//      </button>
//      <div
//       className="offcanvas offcanvas-end"
//       tabIndex="-1"
//       id="offcanvasNavbar"
//       aria-labelledby="offcanvasNavbarLabel"
//      >
//       <div className="offcanvas-header">
//        <h5 className="offcanvas-title" id="offcanvasNavbarLabel">
//         Apartment Facility
//        </h5>
//        <button
//         type="button"
//         className="btn-close"
//         data-bs-dismiss="offcanvas"
//         aria-label="Close"
//        ></button>
//       </div>
//       <div className="offcanvas-body">
//        <ul className="navbar-nav justify-content-end flex-grow-1 pe-3">
//         <li className="nav-item">
//          <a className="nav-link active" aria-current="page" href="/">
//           Home
//          </a>
//         </li>
//         <li className="nav-item">
//          <a className="nav-link" href="page.html">
//           Signup
//          </a>
//         </li>
//        </ul>
//       </div>
//      </div>
//     </div>
//    </nav>

//    <section className="form d-flex align-items-center justify-content-center mt-5">
//     <div className="container">
//      <div className="row justify-content-center">
//       <div className="col-md-6">
//        <form className="p-4">
//         <h2>Create account</h2>
//         <h5 className="mb-4">Welcome to Manager Signup!</h5>
//         <input
//          type="text"
//          placeholder="Id"
//          name="Id"
//          id="id"
//          value={id}
//          className="form-control mb-3"
//          onChange={(event) => setId(event.target.value)}
//         />
//         <input
//          type="datetime-local"
//          placeholder="Booking Date"
//          name="Date"
//          id="bookingDate"
//          className="form-control mb-3"
//          value={formatDateForInput(bookingDate)}
//          onChange={handleBookingDate}
//         />
//         <input
//          type="number"
//          placeholder="FacilityID"
//          name="FacilityID"
//          id="facilityId"
//          className="form-control mb-3"
//          value={facilityId}
//          onChange={(event) => setFacilityId(event.target.value)}
//         />
//         <input
//          type="number"
//          placeholder="ResidentID"
//          name="residentID"
//          id="residentId"
//          className="form-control mb-3"
//          value={residentId}
//          onChange={(event) => setResidentId(event.target.value)}
//         />
//         <input
//          placeholder="Event-Date"
//          name="event-Date"
//          type="datetime-local"
//          className="form-control mb-3"
//          id="eventDate"
//          value={formatDateForInput(eventDate)}
//          onChange={handleEventDate}
//         />
//         {/* <input
//               placeholder="Event-Status"
//               name="event-Status"
//               type="text" id="status"  value={status} onChange={(event) => setStatus(event.target.value)}
//              />
//              */}
//         <input
//          type="button"
//          className="btn btn-dark mb-3 me-3"
//          value="Create Booking"
//          onClick={fnCreate}
//         />
//        </form>
//       </div>
//      </div>
//     </div>
//    </section>

//    <div className="container mt-4">
//       {responseMessage && (
//         <div className="alert alert-success" role="alert">
//           <h2>Booking Details</h2>
//           <h5>Save these details. You will not be able to access them again.</h5>
//           {bookingDetails.map(detail => (
//             <div key={detail.label}>
//               <strong>{detail.label}:</strong> {detail.value}
//             </div>
//           ))}
//         </div>
//       )}
//       {errorMessage && (
//         <div className="alert alert-danger" role="alert">
//           <h2>Error</h2>
//           <pre>{errorMessage}</pre>
//         </div>
//       )}
//       <div className="mt-4">
//         <FacilityGrid />
//       </div>
//     </div>
//   </div>
//  );
// };

// export default BookingForm;

import { useState } from "react";
import BookingService from "../../services/BookingService";
import FacilityGrid from "../facility/FacilityGrid";
import "bootstrap/dist/css/bootstrap.min.css";

// Function to format date for datetime-local input
const formatDateForInput = (date) => {
 if (!date) return ""; // Return empty string if date is not set

 const localDate = new Date(date);
 const year = localDate.getFullYear();
 const month = String(localDate.getMonth() + 1).padStart(2, "0");
 const day = String(localDate.getDate()).padStart(2, "0");
 const hours = String(localDate.getHours()).padStart(2, "0");
 const minutes = String(localDate.getMinutes()).padStart(2, "0");

 return `${year}-${month}-${day}T${hours}:${minutes}`;
};

// Function to convert date to ISO string
const convertToISO = (date) => {
 if (!date) return ""; // Return empty string if date is not set

 return new Date(date).toISOString(); // This includes milliseconds and 'Z'
};

const BookingForm = () => {
 const [id, setId] = useState("");
 const [bookingDate, setBookingDate] = useState("");
 const [facilityId, setFacilityId] = useState("");
 const [residentId, setResidentId] = useState("");
 const [eventDate, setEventDate] = useState("");
 const [status, setStatus] = useState("Available");

 const [responseMessage, setResponseMessage] = useState("");
 const [errorMessage, setErrorMessage] = useState("");

 const handleBookingDate = (event) => {
  setBookingDate(event.target.value);
 };

 const handleEventDate = (event) => {
  setEventDate(event.target.value);
 };

 const fnCreate = () => {
  const booking = {
   id: id,
   bookingDate: convertToISO(bookingDate),
   facilityId: facilityId,
   residentId: residentId,
   eventDate: convertToISO(eventDate),
   status: status,
  };

  BookingService.fnCreateBooking(booking)
   .then((response) => {
    console.log("Response Data:", response.data); // Log the response to check its structure

    // Access the id from bookingDto in the response data
    const bookingDto = response.data.bookingDto;
    if (bookingDto && bookingDto.id) {
     setId(bookingDto.id); // Set autogenerated ID from response
     setResponseMessage(
      `Booking created successfully: ${JSON.stringify(response.data)}`
     );
    } else {
     setErrorMessage("Error: Response does not contain booking ID.");
    }
    setErrorMessage(""); // Clear any previous error message
   })
   .catch((error) => {
    // Handle and display error
    if (error.response) {
     setErrorMessage(`Error: ${error.response.data}`);
    } else if (error.request) {
     setErrorMessage("Request made but no response received.");
    } else {
     setErrorMessage(`Error: ${error.message}`);
    }
    setResponseMessage(""); // Clear any previous response message
   });
 };

 // Define bookingDetails here to avoid errors
 const bookingDetails = [
  { label: "ID", value: id },
  { label: "Booking Date", value: bookingDate },
  { label: "Facility Id", value: facilityId },
  { label: "Resident Id", value: residentId },
  { label: "Event Date", value: eventDate },
  { label: "Status", value: status },
 ];

 return (
  <div>
   <nav className="navbar navbar-expand-lg fixed-top">
    <div className="container">
     <a className="navbar-brand" href="/">
      Apartment Facility
     </a>
     <button
      className="navbar-toggler"
      type="button"
      data-bs-toggle="offcanvas"
      data-bs-target="#offcanvasNavbar"
      aria-controls="offcanvasNavbar"
      aria-label="Toggle navigation"
     >
      <span className="navbar-toggler-icon"></span>
     </button>
     <div
      className="offcanvas offcanvas-end"
      tabIndex="-1"
      id="offcanvasNavbar"
      aria-labelledby="offcanvasNavbarLabel"
     >
      <div className="offcanvas-header">
       <h5 className="offcanvas-title" id="offcanvasNavbarLabel">
        Apartment Facility
       </h5>
       <button
        type="button"
        className="btn-close"
        data-bs-dismiss="offcanvas"
        aria-label="Close"
       ></button>
      </div>
      <div className="offcanvas-body">
       <ul className="navbar-nav justify-content-end flex-grow-1 pe-3">
        <li className="nav-item">
         <a className="nav-link active" aria-current="page" href="/">
          Home
         </a>
        </li>
        <li className="nav-item">
         <a className="nav-link" href="page.html">
          Signup
         </a>
        </li>
       </ul>
      </div>
     </div>
    </div>
   </nav>

   <section className="form d-flex align-items-center justify-content-center mt-5">
    <div className="container">
     <div className="row justify-content-center">
      <div className="col-md-6">
       <form className="p-4">
        <h2>Create a Booking</h2>
        <h5 className="mb-4">Welcome to Booking Page...!</h5>
        {/* <input
         type="text"
         placeholder="Id"
         name="Id"
         id="id"
         value={id}
         className="form-control mb-3"
         onChange={(event) => setId(event.target.value)}
        /> */}
        <input
         type="datetime-local"
         placeholder="Booking Date"
         name="Date"
         id="bookingDate"
         className="form-control mb-3"
         value={formatDateForInput(bookingDate)}
         onChange={handleBookingDate}
        />
        <input
         type="number"
         placeholder="FacilityID"
         name="FacilityID"
         id="facilityId"
         className="form-control mb-3"
         value={facilityId}
         onChange={(event) => setFacilityId(event.target.value)}
        />
        <input
         type="number"
         placeholder="ResidentID"
         name="residentID"
         id="residentId"
         className="form-control mb-3"
         value={residentId}
         onChange={(event) => setResidentId(event.target.value)}
        />
        <input
         placeholder="Event-Date"
         name="event-Date"
         type="datetime-local"
         className="form-control mb-3"
         id="eventDate"
         value={formatDateForInput(eventDate)}
         onChange={handleEventDate}
        />
        <input
         type="button"
         className="btn btn-dark mb-3 me-3"
         value="Create Booking"
         onClick={fnCreate}
        />
       </form>
      </div>
     </div>
    </div>
   </section>

   <div className="container mt-4">
    {responseMessage && (
     <div className="alert alert-success" role="alert">
      <h2>Booking Details</h2>
      <h5>Save these details. You will not be able to access them again.</h5>
      {bookingDetails.map((detail) => (
       <div key={detail.label}>
        <strong>{detail.label}:</strong> {detail.value}
       </div>
      ))}
     </div>
    )}
    {errorMessage && (
     <div className="alert alert-danger" role="alert">
      <h2>Error</h2>
      <pre>{errorMessage}</pre>
     </div>
    )}
    <div className="mt-4">
     <FacilityGrid />
    </div>
   </div>
  </div>
 );
};

export default BookingForm;
